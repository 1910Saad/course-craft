const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const GenerateCourseLayoutAI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a Course on the Following Details with Field as Course Name, Description, Along with the Chapter Name, about, Duration: Category:'Programming', Topic:Python, Level:Basic, Duration: 1 hours, NoOfChapters:5, in JSON Format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"CourseName\": \"Python for Beginners\",\n  \"Field\": \"Programming\",\n  \"Description\": \"This course provides a comprehensive introduction to Python programming, designed for individuals with little to no prior coding experience. You'll learn the fundamentals of Python syntax, data structures, and control flow, enabling you to write simple yet functional programs. By the end of the course, you'll have a solid foundation for further exploration in the world of Python programming.\",\n  \"Level\": \"Basic\",\n  \"Topic\": \"Python\",\n  \"Duration\": \"1 hour\",\n  \"NoOfChapters\": 5,\n  \"Chapters\": [\n    {\n      \"ChapterNumber\": 1,\n      \"ChapterName\": \"Introduction to Python\",\n      \"About\": \"This chapter covers the basics of Python, including its history, features, and uses. You'll learn how to install Python and set up your development environment. We will also cover what are IDEs and why they are helpful.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"What is Python?\",\n        \"History and Features of Python\",\n        \"Uses of Python\",\n        \"Installing Python\",\n        \"Setting up a Development Environment (IDEs)\",\n        \"Running Your First Python Program\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 2,\n      \"ChapterName\": \"Data Types and Variables\",\n      \"About\": \"This chapter introduces fundamental data types in Python, such as integers, floats, strings, and booleans. You'll learn how to declare and use variables to store data, and how to perform basic operations on these data types.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"Integers\",\n        \"Floats\",\n        \"Strings\",\n        \"Booleans\",\n        \"Variables: Declaration and Assignment\",\n        \"Basic Arithmetic Operations\",\n        \"String Concatenation\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 3,\n      \"ChapterName\": \"Control Flow: Conditional Statements\",\n      \"About\": \"This chapter focuses on control flow statements, specifically conditional statements (if, elif, else). You'll learn how to use these statements to make decisions based on conditions, allowing your programs to execute different code blocks based on different inputs.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"If Statements\",\n        \"Elif Statements\",\n        \"Else Statements\",\n        \"Nested If Statements\",\n        \"Comparison Operators\",\n        \"Logical Operators (and, or, not)\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 4,\n      \"ChapterName\": \"Control Flow: Loops\",\n      \"About\": \"This chapter covers the different types of loops in Python (for and while loops). You'll learn how to use these loops to repeat code blocks, making it easier to perform repetitive tasks. We will also discuss the use of `break` and `continue` statements.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"For Loops\",\n        \"While Loops\",\n        \"Looping through Strings\",\n        \"Looping through Lists (Introduction)\",\n        \"Break Statement\",\n        \"Continue Statement\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 5,\n      \"ChapterName\": \"Functions\",\n      \"About\": \"This chapter introduces the concept of functions. You'll learn how to define your own functions to encapsulate reusable code blocks. You'll also learn about function arguments and return values. This chapter will conclude with simple examples of using functions to solve problems.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"Defining Functions\",\n        \"Calling Functions\",\n        \"Function Arguments (Positional and Keyword Arguments)\",\n        \"Return Values\",\n        \"Scope of Variables (Local vs. Global - basic introduction)\",\n        \"Simple Function Examples\"\n      ]\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });

    export const GenerateChapterContent_AI = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a Course on the Following Details with Field as Course Name, Description, Along with the Chapter Name, about, Duration: Category:'Programming', Topic:Python, Level:Basic, Duration: 1 hours, NoOfChapters:5, in JSON Format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"CourseName\": \"Python for Beginners\",\n  \"Field\": \"Programming\",\n  \"Description\": \"This course provides a comprehensive introduction to Python programming, designed for individuals with little to no prior coding experience. You'll learn the fundamentals of Python syntax, data structures, and control flow, enabling you to write simple yet functional programs. By the end of the course, you'll have a solid foundation for further exploration in the world of Python programming.\",\n  \"Level\": \"Basic\",\n  \"Topic\": \"Python\",\n  \"Duration\": \"1 hour\",\n  \"NoOfChapters\": 5,\n  \"Chapters\": [\n    {\n      \"ChapterNumber\": 1,\n      \"ChapterName\": \"Introduction to Python\",\n      \"About\": \"This chapter covers the basics of Python, including its history, features, and uses. You'll learn how to install Python and set up your development environment. We will also cover what are IDEs and why they are helpful.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"What is Python?\",\n        \"History and Features of Python\",\n        \"Uses of Python\",\n        \"Installing Python\",\n        \"Setting up a Development Environment (IDEs)\",\n        \"Running Your First Python Program\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 2,\n      \"ChapterName\": \"Data Types and Variables\",\n      \"About\": \"This chapter introduces fundamental data types in Python, such as integers, floats, strings, and booleans. You'll learn how to declare and use variables to store data, and how to perform basic operations on these data types.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"Integers\",\n        \"Floats\",\n        \"Strings\",\n        \"Booleans\",\n        \"Variables: Declaration and Assignment\",\n        \"Basic Arithmetic Operations\",\n        \"String Concatenation\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 3,\n      \"ChapterName\": \"Control Flow: Conditional Statements\",\n      \"About\": \"This chapter focuses on control flow statements, specifically conditional statements (if, elif, else). You'll learn how to use these statements to make decisions based on conditions, allowing your programs to execute different code blocks based on different inputs.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"If Statements\",\n        \"Elif Statements\",\n        \"Else Statements\",\n        \"Nested If Statements\",\n        \"Comparison Operators\",\n        \"Logical Operators (and, or, not)\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 4,\n      \"ChapterName\": \"Control Flow: Loops\",\n      \"About\": \"This chapter covers the different types of loops in Python (for and while loops). You'll learn how to use these loops to repeat code blocks, making it easier to perform repetitive tasks. We will also discuss the use of `break` and `continue` statements.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"For Loops\",\n        \"While Loops\",\n        \"Looping through Strings\",\n        \"Looping through Lists (Introduction)\",\n        \"Break Statement\",\n        \"Continue Statement\"\n      ]\n    },\n    {\n      \"ChapterNumber\": 5,\n      \"ChapterName\": \"Functions\",\n      \"About\": \"This chapter introduces the concept of functions. You'll learn how to define your own functions to encapsulate reusable code blocks. You'll also learn about function arguments and return values. This chapter will conclude with simple examples of using functions to solve problems.\",\n      \"Duration\": \"12 minutes\",\n      \"Topics\": [\n        \"Defining Functions\",\n        \"Calling Functions\",\n        \"Function Arguments (Positional and Keyword Arguments)\",\n        \"Return Values\",\n        \"Scope of Variables (Local vs. Global - basic introduction)\",\n        \"Simple Function Examples\"\n      ]\n    }\n  ]\n}\n```"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "Explain the concept in Detail on Topic:Python, Chapter:File Handling, in JSON Format with list of array with field as title, explanation on give chapter in detail, Code Example(Code field in <precode> format) if applicable\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"Topic\": \"Python File Handling\",\n  \"Chapter\": \"File Handling\",\n  \"Description\": \"File handling in Python allows you to interact with files on your computer's file system. You can perform operations like reading data from files, writing data to files, and appending data to existing files. Python provides built-in functions and methods for efficient file manipulation. This chapter will guide you through the core concepts and techniques for working with files in Python.\",\n  \"Concepts\": [\n    {\n      \"Title\": \"Opening Files\",\n      \"Explanation\": \"Before you can work with a file, you need to open it. The `open()` function is used to open files. It takes the file path as the first argument and the mode as the second argument. The mode specifies the operation you want to perform on the file (e.g., reading, writing, appending).\",\n      \"CodeExample\": \"<pre><code># Opening a file in read mode\\nfile = open(\\\"my_file.txt\\\", \\\"r\\\")\\n\\n# Opening a file in write mode\\nfile = open(\\\"my_file.txt\\\", \\\"w\\\")\\n\\n# Opening a file in append mode\\nfile = open(\\\"my_file.txt\\\", \\\"a\\\")\\n\\n# Opening a file in binary read mode\\nfile = open(\\\"my_file.txt\\\", \\\"rb\\\")\\n\\n# Opening a file in binary write mode\\nfile = open(\\\"my_file.txt\\\", \\\"wb\\\")</code></pre>\"\n    },\n    {\n      \"Title\": \"File Modes\",\n      \"Explanation\": \"The mode argument in the `open()` function determines how the file will be used.  Here's a breakdown of common file modes:\\n\\n*   `'r'` (Read): Opens the file for reading. This is the default mode if no mode is specified.\\n*   `'w'` (Write): Opens the file for writing. If the file exists, it will be overwritten. If the file does not exist, it will be created.\\n*   `'a'` (Append): Opens the file for appending. Data will be added to the end of the file. If the file does not exist, it will be created.\\n*   `'x'` (Exclusive Creation): Creates a file, but fails if the file already exists.\\n*   `'b'` (Binary): Opens the file in binary mode (e.g., for images or other non-text files).  Must be combined with another mode (e.g., 'rb', 'wb', 'ab').\\n*   `'t'` (Text): Opens the file in text mode (default). Text mode handles line endings and character encoding.\\n*   `'+'` (Updating): Opens the file for both reading and writing/appending.  Must be combined with another mode (e.g., 'r+', 'w+', 'a+').\"\n    },\n    {\n      \"Title\": \"Reading Files\",\n      \"Explanation\": \"There are several ways to read data from a file in Python:\\n\\n*   `read()`: Reads the entire contents of the file as a single string.\\n*   `readline()`: Reads a single line from the file, including the newline character (`\\\\n`).\\n*   `readlines()`: Reads all lines from the file and returns them as a list of strings.\",\n      \"CodeExample\": \"<pre><code># Reading the entire file\\nfile = open(\\\"my_file.txt\\\", \\\"r\\\")\\ncontent = file.read()\\nprint(content)\\nfile.close()\\n\\n# Reading line by line\\nfile = open(\\\"my_file.txt\\\", \\\"r\\\")\\nline1 = file.readline()\\nline2 = file.readline()\\nprint(line1)\\nprint(line2)\\nfile.close()\\n\\n# Reading all lines into a list\\nfile = open(\\\"my_file.txt\\\", \\\"r\\\")\\nlines = file.readlines()\\nprint(lines)\\nfile.close()</code></pre>\"\n    },\n    {\n      \"Title\": \"Writing to Files\",\n      \"Explanation\": \"You can write data to a file using the `write()` method. The `write()` method takes a string as input and writes it to the file. If the file is opened in 'w' mode, it will overwrite any existing content. If it's opened in 'a' mode, the new data will be appended to the end.\",\n      \"CodeExample\": \"<pre><code># Writing to a file\\nfile = open(\\\"my_file.txt\\\", \\\"w\\\")\\nfile.write(\\\"This is the first line.\\\\n\\\")\\nfile.write(\\\"This is the second line.\\\\n\\\")\\nfile.close()\\n\\n# Appending to a file\\nfile = open(\\\"my_file.txt\\\", \\\"a\\\")\\nfile.write(\\\"This is a new line appended to the file.\\\\n\\\")\\nfile.close()</code></pre>\"\n    },\n    {\n      \"Title\": \"Closing Files\",\n      \"Explanation\": \"It's crucial to close files after you're done working with them. Closing a file releases the resources held by the file object and ensures that any buffered data is written to disk. You can close a file using the `close()` method.\",\n      \"CodeExample\": \"<pre><code>file = open(\\\"my_file.txt\\\", \\\"r\\\")\\n# ... perform operations ...\\nfile.close()</code></pre>\"\n    },\n    {\n      \"Title\": \"The 'with' Statement (Context Manager)\",\n      \"Explanation\": \"The `with` statement provides a convenient way to automatically close files, even if errors occur. It's a recommended practice to use the `with` statement when working with files.  The `with` statement creates a context, and when the context exits (either normally or due to an exception), the file is automatically closed.\",\n      \"CodeExample\": \"<pre><code>with open(\\\"my_file.txt\\\", \\\"r\\\") as file:\\n    content = file.read()\\n    print(content)\\n# File is automatically closed here</code></pre>\"\n    },\n    {\n      \"Title\": \"File Pointers (Seek and Tell)\",\n      \"Explanation\": \"The file pointer indicates the current position within the file.  You can use the `tell()` method to get the current position of the file pointer (in bytes). You can use the `seek()` method to move the file pointer to a specific position.\\n\\n*   `tell()`: Returns the current file pointer position.\\n*   `seek(offset, from_what)`: Moves the file pointer to a new position.\\n    *   `offset`: The number of bytes to move.\\n    *   `from_what`:  Specifies the reference point for the offset.\\n        *   0: Beginning of the file (default).\\n        *   1: Current position.\\n        *   2: End of the file.\",\n      \"CodeExample\": \"<pre><code>with open(\\\"my_file.txt\\\", \\\"r\\\") as file:\\n    print(\\\"Initial position:\\\", file.tell())\\n    file.read(5)\\n    print(\\\"Position after reading 5 bytes:\\\", file.tell())\\n    file.seek(0) # Go back to the beginning of the file\\n    print(\\\"Position after seeking to the beginning:\\\", file.tell())\\n    file.seek(5,0) #Go to 6th byte (offset 5 from start)\\n    print(\\\"Position after seeking to 6th byte:\\\", file.tell())\\n</code></pre>\"\n    },\n    {\n      \"Title\": \"Error Handling\",\n      \"Explanation\": \"When working with files, it's important to handle potential errors, such as `FileNotFoundError` (if the file does not exist) or `IOError` (if there are problems reading or writing to the file). You can use `try...except` blocks to catch and handle these exceptions.\",\n      \"CodeExample\": \"<pre><code>try:\\n    with open(\\\"nonexistent_file.txt\\\", \\\"r\\\") as file:\\n        content = file.read()\\n        print(content)\\nexcept FileNotFoundError:\\n    print(\\\"File not found.\\\")\\nexcept IOError:\\n    print(\\\"An error occurred while reading the file.\\\")\\n</code></pre>\"\n    }\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
